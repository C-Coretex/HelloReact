[{"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetwork.js":"1","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\App.js":"2","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetworkFunctions.js":"3","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\index.js":"4","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\Landing.js":"5","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\CreateNN.js":"6"},{"size":3415,"mtime":1607537194077,"results":"7","hashOfConfig":"8"},{"size":1299,"mtime":1608110057090,"results":"9","hashOfConfig":"8"},{"size":3197,"mtime":1606991910026,"results":"10","hashOfConfig":"8"},{"size":196,"mtime":1604250998972,"results":"11","hashOfConfig":"8"},{"size":1359,"mtime":1608109029808,"results":"12","hashOfConfig":"8"},{"size":880,"mtime":1608110547328,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1tgqrwv",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"17"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetwork.js",["29"],"import React, { useState, useRef } from \"react\";\r\n\t\r\nimport * as NNApi from \"./NeuralNetworkFunctions\"\r\n\t\r\n\t\r\nexport default function NeuralNetwork() {\r\n\r\n\tconst NNId = useRef('');\r\n\tconst interval = useRef('');\r\n\r\n\tconst moment = useRef('');\r\n\tconst learningRate = useRef('');\r\n\tconst struct = useRef('');\r\n\tconst terminatingError = useRef('');\r\n\r\n\tconst [startDisabled, setStartDisabled] = useState(false);\r\n\tconst [stopDisabled, setStopDisabled] = useState(true);\r\n\tconst [continueDisabled, setContinueDisabled] = useState(true);\r\n\tconst [deleteDisabled, setDeleteDisabled] = useState(true);\r\n\tconst [NNstate, setNNstate] = useState(null);\r\n\t\r\n\t\r\n\t\r\n\tasync function startNN() {\r\n\t\ttry {\r\n\t\t\tconst data = await NNApi.startNN({ moment: moment.current.value, learningRate: learningRate.current.value, struct: struct.current.value, terminatingError: terminatingError.current.value })\r\n\r\n\t\t\tNNId.current = data\r\n\r\n\t\t\tgetNNState()\r\n\t\t\tinterval.current = setInterval(() => {\r\n\t\t\t\tgetNNState()\r\n\t\t\t}, 5000)\r\n\r\n\t\t\tsetStartDisabled(true)\r\n\t\t\tsetStopDisabled(false)\r\n\t\t\tsetDeleteDisabled(false)\r\n\t\t\t\r\n\t\t\tconsole.log('NN created with ID ' + data)\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\r\n\t}\r\n\t\r\n\tasync function stopNN() {\r\n\t\ttry {\r\n\t\t\tconst response = await NNApi.stopNN(NNId.current)\r\n\r\n\t\t\tclearInterval(interval.current)\r\n\r\n\t\t\tsetStopDisabled(true)\r\n\t\t\tsetContinueDisabled(false)\r\n\r\n\t\t\tconsole.log('process ' + NNId.current + ' stopped with code ' + response)\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync function continueNN() {\r\n\t\ttry {\r\n\t\t\tconst response = await NNApi.continueNN(NNId.current)\r\n\r\n\t\t\tgetNNState()\r\n\t\t\tinterval.current = setInterval(() => {\r\n\t\t\t\tgetNNState()\r\n\t\t\t}, 5000)\r\n\r\n\t\t\tsetContinueDisabled(true)\r\n\t\t\tsetStopDisabled(false)\r\n\r\n\t\t\tconsole.log('process ' + NNId.current + ' continued with code ' + response)\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync function deleteNN() {\r\n\t\ttry {\r\n\t\t\tconst response = await NNApi.deleteNN(NNId.current)\r\n\r\n\t\t\tconst state = { trainingSets: 0, iteration: 0, errorSum: 0, sw: \"\" }\r\n\r\n\t\t\tclearInterval(interval.current)\r\n\r\n\t\t\tsetStopDisabled(true)\r\n\t\t\tsetDeleteDisabled(true)\r\n\t\t\tsetStartDisabled(false)\r\n\t\t\tsetContinueDisabled(true)\r\n\t\t\tsetNNstate(state)\r\n\r\n\t\t\tconsole.log('process ' + NNId.current + ' deleted with code ' + response)\r\n\t\t}\r\n\t\tcatch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t}\r\n\t}\r\n\t\r\n\tasync function getNNState() {\r\n\t\tconst data = await NNApi.getNNState(NNId.current)\r\n\r\n\t\tsetNNstate(data)\r\n\r\n\t\tconsole.log(data)\r\n\t}\r\n\t\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>\r\n\t\t\t\t<label>Moment: <input type=\"number\" ref={moment} placeholder=\"e.g. 0.5\" /></label>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>Learning rate: <input type=\"number\" ref={learningRate} placeholder=\"e.g. 0.1\" /></label>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>Neural Network struct: <input type=\"text\" ref={struct} placeholder=\"e.g. 784 26+ 16 10\" /></label>\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\t<label>Terminating error: <input type=\"number\" ref={terminatingError} placeholder=\"e.g. 0.00011\" /></label>\r\n\t\t\t</p>\r\n\r\n\t\t\t<button onClick={startNN} disabled={startDisabled}>Start NeuralNetwork teaching</button>\r\n\t\t\t<button onClick={stopNN} disabled={stopDisabled}>Stop NeuralNetwork teaching</button>\r\n\t\t\t<button onClick={continueNN} disabled={continueDisabled}>Continue NeuralNetwork teaching</button>\r\n\t\t\t<button onClick={deleteNN} disabled={deleteDisabled}>Delete NeuralNetwork</button>\r\n\r\n\t\t</div>\r\n\t)\r\n}",["30","31"],"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\App.js",["32"],"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetworkFunctions.js",["33"],"\r\n\r\n// #region API URLs\r\nconst urlStartNN = \"http://localhost:7071/api/StartNN\"\r\nconst urlStopNN = \"http://localhost:7071/api/StopNN\"\r\nconst urlContinueNN = \"http://localhost:7071/api/ContinueNN\"\r\nconst urlGetNNState = \"http://localhost:7071/api/GetNNState\"\r\nconst urlTestNN = \"http://localhost:7071/api/TestNN\"\r\nconst urlDeleteNN = \"http://localhost:7071/api/DeleteNN\"\r\n// #endregion\r\n\r\n\r\nexport async function startNN(NNStructObj) {\r\n\tconst { moment, learningRate, struct, terminatingError } = NNStructObj\r\n\r\n\tlet NNStruct = {\r\n\t\tMomentTemp: moment === \"\" ? 0 : moment,\r\n\t\tLearningRateTemp: learningRate === \"\" ? 0 : learningRate,\r\n\t\tNeuronsAndLayers: struct === \"\" ? \"\" : struct,\r\n\t\tTerminatingErrorProcents: terminatingError === \"\" ? 0 : terminatingError\r\n\t}\r\n\r\n\tconsole.log(NNStruct)\r\n\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\tbody: JSON.stringify(NNStruct)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlStartNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function stopNN(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\t\r\n\t\r\n\ttry {\r\n\t\tconst response = await fetch(urlStopNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = response.json()\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function continueNN(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlContinueNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function deleteNN(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlDeleteNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function getNNState(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\t\r\n\t\r\n\ttry {\r\n\t\tconst response = await fetch(urlGetNNState, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\t\t\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\index.js",[],"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\Landing.js",[],"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\CreateNN.js",[],{"ruleId":"34","severity":1,"message":"35","line":20,"column":9,"nodeType":"36","messageId":"37","endLine":20,"endColumn":16},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"34","severity":1,"message":"42","line":4,"column":8,"nodeType":"36","messageId":"37","endLine":4,"endColumn":21},{"ruleId":"34","severity":1,"message":"43","line":8,"column":7,"nodeType":"36","messageId":"37","endLine":8,"endColumn":16},"no-unused-vars","'NNstate' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["44"],"no-negated-in-lhs",["45"],"'NeuralNetwork' is defined but never used.","'urlTestNN' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]