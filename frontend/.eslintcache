[{"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetwork.js":"1","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\App.js":"2","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetworkFunctions.js":"3","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\index.js":"4"},{"size":3585,"mtime":1606931432293,"results":"5","hashOfConfig":"6"},{"size":406,"mtime":1606844616303,"results":"7","hashOfConfig":"6"},{"size":3191,"mtime":1606930387820,"results":"8","hashOfConfig":"6"},{"size":196,"mtime":1604250998972,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18097yq",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetwork.js",["19","20"],"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\App.js",[],"C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\components\\NeuralNetworkFunctions.js",["21"],"\r\n\r\n// #region API URLs\r\nconst urlStartNN = \"http://localhost:7071/api/StartNN\"\r\nconst urlStopNN = \"http://localhost:7071/api/StopNN\"\r\nconst urlContinueNN = \"http://localhost:7071/api/ContinueNN\"\r\nconst urlGetNNState = \"http://localhost:7071/api/GetNNState\"\r\nconst urlTestNN = \"http://localhost:7071/api/TestNN\"\r\nconst urlDeleteNN = \"http://localhost:7071/api/DeleteNN\"\r\n// #endregion\r\n\r\n\r\nexport async function startNN(NNStructObj) {\r\n\tconst { moment, learningRate, struct, terminatingError } = NNStructObj\r\n\r\n\tlet NNStruct = {\r\n\t\tMomentTemp: moment === \"\" ? 0 : moment,\r\n\t\tLearningRateTemp: learningRate === \"\" ? 0 : learningRate,\r\n\t\tNeuronsAndLayers: struct === \"\" ? \"\" : struct,\r\n\t\tTerminatingErrorProcents: terminatingError === \"\" ? 0 : terminatingError\r\n\t}\r\n\r\n\tconsole.log(NNStruct)\r\n\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\tbody: JSON.stringify(NNStruct)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlStartNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function stopNN(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlStopNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = response.json()\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function continueNN(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlContinueNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function deleteNN(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlDeleteNN, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}\r\n\r\nexport async function getNNState(NNId) {\r\n\tconst requestOptions = {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t'Accept': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(NNId)\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst response = await fetch(urlGetNNState, requestOptions)\r\n\t\tif (!response.ok) throw new Error('Problem in response with message: ' + response)\r\n\t\t\r\n\t\tconst data = await response.json();\r\n\t\treturn data\r\n\t}\r\n\tcatch (err) {\r\n\t\tthrow new Error('Exited with error: ' + err)\r\n\t}\r\n}","C:\\Users\\valer\\Desktop\\GitSave\\HelloReact\\frontend\\src\\index.js",[],{"ruleId":"22","severity":1,"message":"23","line":1,"column":35,"nodeType":"24","messageId":"25","endLine":1,"endColumn":44},{"ruleId":"22","severity":1,"message":"26","line":20,"column":9,"nodeType":"24","messageId":"25","endLine":20,"endColumn":16},{"ruleId":"22","severity":1,"message":"27","line":8,"column":7,"nodeType":"24","messageId":"25","endLine":8,"endColumn":16},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'NNstate' is assigned a value but never used.","'urlTestNN' is assigned a value but never used."]